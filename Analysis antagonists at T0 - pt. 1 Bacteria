---
title: "analysis of antagonists - bacteria at T0"
editor_options:
  chunk_output_type: console
---

Load packages
```{r}
library(dplyr)
library(phyloseq)
library(ggpubr)
library(microbiome)
library(tidyr)
library(forcats)
library(RColorBrewer)
library(vegan)
library(forcats)
```
1_ Beta diversity
1A_plots
```{r}
#load files
load (file = 'ps-selected-only-bact-filt-lowabd-no-neg-norep2.RData')
ps.bact.dna <- subset_samples(ps.bact, nucleic.acid == "DNA")
ps.bact.rna <- subset_samples(ps.bact, nucleic.acid == "RNA")

#normalisation in CSS
library(metagMisc)
ps.bact.dna_css = phyloseq_transform_css(ps.bact.dna, norm = TRUE, log = FALSE)
ps.bact.rna_css = phyloseq_transform_css(ps.bact.rna, norm = TRUE, log = FALSE)

#select antagonists for DNA and reorder dataset
ant.bact.dna.gen.css <- subset_taxa(ps.bact.dna_css,Genus %in% c("Pseudomonas", "Bacillus", "Pasteuria", "Lysobacter", "Rhizobium", "Variovorax", "Serratia"))
ant.bact.dna.gen.css@sam_data$pre.crop <- fct_relevel(ant.bact.dna.gen.css@sam_data$pre.crop, "bo", "ry", "ir", "er")
ant.bact.dna.gen.css@sam_data$cc <- fct_relevel(ant.bact.dna.gen.css@sam_data$cc, "FW", "OSR_T", "OSR_A", "OSR_R","PHA", "VE", "BO","BO.OSR_R", "BO.OSR_T", "PHA.OSR_T", "VE.OSR_T")

#select antagonists for RNA and reorder dataset
ant.bact.rna.gen.css <- subset_taxa(ps.bact.rna_css, Genus %in% c("Pseudomonas", "Bacillus", "Pasteuria", "Lysobacter", "Rhizobium", "Variovorax", "Serratia"))
ant.bact.rna.gen.css@sam_data$pre.crop <- fct_relevel(ant.bact.rna.gen.css@sam_data$pre.crop, "bo", "ry", "ir", "er")
ant.bact.rna.gen.css@sam_data$cc <- fct_relevel(ant.bact.rna.gen.css@sam_data$cc, "FW", "OSR_T", "OSR_A", "OSR_R","PHA", "VE", "BO","BO.OSR_R", "BO.OSR_T", "PHA.OSR_T", "VE.OSR_T")
```
Plot PCoA for rhizosphere of pre-crops
```{r}
#select colours
colorCode0 <- c(bo = "#D55E00", ry = "#E69F00", ir = "#F0E442",  er = "#009E73") 
#select shape
shapeCode00 <- c("rhizo" = 17)

#1. DNA
#ordinate in Bray-Curtis
ant.bact.dna.gen.css_bray <- ordinate(subset_samples (ant.bact.dna.gen.css, time.point =="T0" &sample.type == "rhizo"), "PCoA", "bray")
#plot
plot_ant.bact.dna.gen.css<- plot_ordination (subset_samples (
  ant.bact.dna.gen.css, time.point =="T0" & sample.type == "rhizo"), 
                                            ant.bact.dna.gen.css_bray, type = "sites",
                                 color = "pre.crop",
                                 shape = "sample.type",
                                 title = expression(paste("PCoA antagonists - DNA")), label = NULL)+
                                 geom_point(aes(shape=sample.type, fill = "pre.crop"),  size = 4) + 
  guides(colour = guide_legend(override.aes = list(shape = 17))) + 
  scale_shape_manual (values = shapeCode00) +
  scale_color_manual(values = colorCode0) + 
  scale_fill_manual(values = colorCode0)+
  #scale_color_brewer(palette = "Paired")+
  #stat_ellipse(aes(group=pre.crop), type = "t", level = 0.95, segments = 51, na.rm = FALSE, alpha=0.5) +
  #geom_text(aes(label = pre.crop), size=3) +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
        #panel.background = element_blank(), axis.line = element_line(size = 1, colour = "black"),
        rect = element_rect(fill = "white",  colour = "black",size = 1, linetype = 2),
        axis.ticks = element_line(colour = "black"),
        axis.title.x = element_text(face="bold", colour="black", size=8),
        axis.title.y = element_text(face="bold", colour="black", size=8),
        axis.text.x  = element_text(face="bold", colour = "black", angle=360, vjust=0.5, size=9),
        axis.text.y  = element_text(face="bold", colour = "black", angle=360, vjust=0.5, size=9),
        panel.background = element_rect(fill = "white", colour = "black", linetype = 1, size = 1),
        panel.border = element_blank(),
        legend.position = "right")
#plot
plot(plot_ant.bact.dna.gen.css)

#2. RNA
ant.bact.rna.gen.css_bray <- ordinate(subset_samples (ant.bact.rna.gen.css, time.point =="T0" &sample.type == "rhizo"), "PCoA", "bray")
plot_ant.bact.rna.gen.css<- plot_ordination (subset_samples (
  ant.bact.rna.gen.css, time.point =="T0" &sample.type == "rhizo"), 
                                            ant.bact.rna.gen.css_bray, type = "sites",
                                 color = "pre.crop",
                                 shape = "sample.type",
                                 title = expression(paste("PCoA antagonists - RNA")), label = NULL)+
                                 geom_point(aes(shape=sample.type, fill = "pre.crop"),  size = 4) + 
  guides(colour = guide_legend(override.aes = list(shape = 17))) + 
  scale_shape_manual (values = shapeCode00) +
  scale_color_manual(values = colorCode0) + 
  scale_fill_manual(values = colorCode0)+
  #scale_color_brewer(palette = "Paired")+
  #stat_ellipse(aes(group=pre.crop), type = "t", level = 0.95, segments = 51, na.rm = FALSE, alpha=0.5) +
  #geom_text(aes(label = pre.crop), size=3) +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
        #panel.background = element_blank(), axis.line = element_line(size = 1, colour = "black"),
        rect = element_rect(fill = "white",  colour = "black",size = 1, linetype = 2),
        axis.ticks = element_line(colour = "black"),
        axis.title.x = element_text(face="bold", colour="black", size=8),
        axis.title.y = element_text(face="bold", colour="black", size=8),
        axis.text.x  = element_text(face="bold", colour = "black", angle=360, vjust=0.5, size=9),
        axis.text.y  = element_text(face="bold", colour = "black", angle=360, vjust=0.5, size=9),
        panel.background = element_rect(fill = "white", colour = "black", linetype = 1, size = 1),
        panel.border = element_blank(),
        legend.position = "right")

plot(plot_ant.bact.rna.gen.css)
```

Merge figures of PCoA DNA and PCoA RNA
```{r}
library(cowplot)
PCoA_T0_ant <- cowplot::plot_grid(
   plot_ant.bact.dna.gen.css + theme(legend.position="none", title = element_blank()), 
  plot_ant.bact.rna.gen.css+ theme(legend.position="none", title = element_blank()),
  nrow = 1, ncol = 2, scale = 1,
  hjust = 1) 
PCoA_T0_ant

legend <- get_legend(
  # create some space to the left of the legend
  plot_ant.bact.rna.gen.css + theme(legend.box.margin = margin(0,0,0,10)))

PCoA_T0_ant.l <- plot_grid(PCoA_T0_ant, legend, rel_widths = c(2, 0.5))
PCoA_T0_ant.l
```

1.B _ Statistical analysis: PERMANOVA

```{r}
#DNA
sampledf <- data.frame(sample_data(subset_samples(ant.bact.dna.gen.css, time.point == "T0")))
ant.bact.dna.gen.css_bray <- phyloseq::distance(subset_samples(ant.bact.dna.gen.css, time.point == "T0"), method = "bray")
dispersion<-betadisper(ant.bact.dna.gen.css_bray , group=sampledf$pre.crop)
permutest(dispersion) #0.197
plot(dispersion, hull=FALSE, ellipse=TRUE, label = FALSE) ##sd ellipse

adonis2(ant.bact.dna.gen.css_bray ~ block2+sample.type+pre.crop , data = sampledf, permutations = 999 )
adonis2(ant.bact.dna.gen.css_bray ~ block2+sample.type+mc.pi.sh , data = sampledf, permutations = 999 )

#RNA
sampledf <- data.frame(sample_data(subset_samples(ant.bact.rna.gen.css, time.point == "T0")))
ant.bact.rna.gen.css_bray <- phyloseq::distance(subset_samples(ant.bact.rna.gen.css, time.point == "T0"), method = "bray")
dispersion<-betadisper(ant.bact.rna.gen.css_bray , group=sampledf$pre.crop)
permutest(dispersion) #0.626
plot(dispersion, hull=FALSE, ellipse=TRUE, label = FALSE) ##sd ellipse

adonis2(ant.bact.rna.gen.css_bray ~ block2 +sample.type +pre.crop , data = sampledf, permutations = 999 )
adonis2(ant.bact.rna.gen.css_bray ~ block2 +sample.type+mc.pi.sh , data = sampledf, permutations = 999 )
```

#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################


2 _ alpha diversity
```{r}
#load data
load (file = 'ps-selected-only-bact-filt-lowabd-no-neg-norep2.RData')
ps.bact.dna <- subset_samples(ps.bact, nucleic.acid == "DNA"  & time.point == "T0")
ps.bact.rna <- subset_samples(ps.bact, nucleic.acid == "RNA"  & time.point == "T0")

#rarefy to minimum library size
ps.bact.dna_rar = rarefy_even_depth(ps.bact.dna, rngseed=1, sample.size=min(sample_sums(ps.bact.rna)), replace=F) #160281 reads - 97067OTUs removed
ps.bact.rna_rar = rarefy_even_depth(ps.bact.rna, rngseed=1, sample.size=min(sample_sums(ps.bact.rna)), replace=F) #41140 reads - 97067OTUs removed

#check if it worked
summary(readcount(ps.bact.dna_rar))
summary(readcount(ps.bact.rna_rar))
```

Select antagonists on th erarefied datasets
```{r}
#1_DNA
ant.bact.dna.gen_rar <- subset_taxa(ps.bact.dna_rar, Genus %in% c("Pseudomonas", "Bacillus", "Pasteuria", "Lysobacter", "Rhizobium", "Variovorax", "Serratia"))
ant.bact.dna.gen_rar@sam_data$pre.crop <- fct_relevel(ant.bact.dna.gen_rar@sam_data$pre.crop, "bo", "ry", "ir", "er")
ant.bact.dna.gen_rar@sam_data$cc <- fct_relevel(ant.bact.dna.gen_rar@sam_data$cc, "FW", "OSR_T", "OSR_A", "OSR_R","PHA", "VE", "BO","BO.OSR_R", "BO.OSR_T", "PHA.OSR_T", "VE.OSR_T")

#2_RNA
ant.bact.rna.gen_rar <- subset_taxa(ps.bact.rna_rar, Genus %in% c("Pseudomonas", "Bacillus", "Pasteuria", "Lysobacter", "Rhizobium", "Variovorax", "Serratia"))
ant.bact.rna.gen_rar@sam_data$pre.crop <- fct_relevel(ant.bact.rna.gen_rar@sam_data$pre.crop, "er", "ir", "ry", "bo")
#ant.bact.rna.gen_rar@sam_data$cc <- fct_relevel(ant.bact.rna.gen_rar@sam_data$cc, "FW", "OSR_T", "OSR_A", "OSR_R","PHA", "VE", "BO","BO.OSR_R", "BO.OSR_T", "PHA.OSR_T", "VE.OSR_T")
```
Calculate alpha diversity measures (Chao1 is calculated but not used)
```{r}
alpha.ant.gen.dna <- microbiome::alpha(ant.bact.dna.gen_rar, index = c("observed", "diversity_shannon", "chao1"))
alpha.ant.gen.dna.meta <- meta(ant.bact.dna.gen_rar)
alpha.ant.gen.dna.meta$Observed <- alpha.ant.gen.dna$observed
alpha.ant.gen.dna.meta$Shannon <- alpha.ant.gen.dna$diversity_shannon
alpha.ant.gen.dna.meta$Chao1 <- alpha.ant.gen.dna$chao1

alpha.ant.gen.rna <- microbiome::alpha(ant.bact.rna.gen_rar, index = c("observed", "diversity_shannon", "chao1"))
alpha.ant.gen.rna.meta <- meta(ant.bact.rna.gen_rar)
alpha.ant.gen.rna.meta$Observed <- alpha.ant.gen.rna$observed
alpha.ant.gen.rna.meta$Shannon <- alpha.ant.gen.rna$diversity_shannon
alpha.ant.gen.rna.meta$Chao1 <- alpha.ant.gen.rna$chao1
```
Plot in box plots
```{r}
#1_Shannon DNA

#set colours
colorCode0 <- c(bo = "#D55E00", ry = "#E69F00", ir = "#F0E442",  er = "#009E73")
shapeCode0 <- c("bo" = 19, "ry" = 17,  "ir" = 15, "er"= 25)

#relevl factors
alpha.ant.gen.dna.meta$pre.crop <- fct_relevel(alpha.ant.gen.dna.meta$pre.crop, "bo", "ry", "ir", "er")

#plot
ant_shannon.dna <-  alpha.ant.gen.dna.meta %>% filter( sample.type=="rhizo") %>% 
  ggplot (aes (x= pre.crop, y=Shannon, fill = pre.crop )) +
  geom_boxplot( alpha = 1, color = "black", fatten = 1) +
  #scale_color_manual(values = colorCode) + 
  scale_fill_manual(values = colorCode0) +
  scale_y_continuous(limits = c(2,3.5)) + 
  theme_bw() + 
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
        #panel.background = element_blank(), axis.line = element_line(size = 1, colour = "black"),
        rect = element_rect(fill = "white",  colour = "black",size = 1),
        axis.ticks = element_line(colour = "black"),
        axis.title.x = element_text(face="bold", colour="black", size=15),
        axis.title.y = element_text(colour="black", size=15),
        axis.text.x  = element_text(colour = "black", angle=90, vjust=0.5, size=10, hjust = 1),
        axis.text.y  = element_text(colour = "black", angle=360, vjust=0.5, size=10),
        axis.title.x.bottom = element_blank(),
        panel.background = element_rect(fill = "white", colour = "black", linetype = 1, size = 1),
        panel.border = element_blank(),
        legend.position = "none")
plot(ant_shannon.dna)

#2_ Shannon RNA
#relevel factors
alpha.ant.gen.rna.meta$pre.crop <- fct_relevel(alpha.ant.gen.rna.meta$pre.crop, "bo", "ry", "ir", "er")

#plot
ant_shannon.rna <-  alpha.ant.gen.rna.meta %>% filter(time.point == "T0"& sample.type=="rhizo") %>% 
  ggplot (aes (x= pre.crop, y=Shannon, fill = pre.crop )) +
  geom_boxplot( alpha = 1, color = "black", fatten = 1) +
  #scale_color_manual(values = colorCode) + 
  scale_fill_manual(values = colorCode0) +
  scale_y_continuous(limits = c(2,3.5)) + 
  theme_bw() + 
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
        #panel.background = element_blank(), axis.line = element_line(size = 1, colour = "black"),
        rect = element_rect(fill = "white",  colour = "black",size = 1),
        axis.ticks = element_line(colour = "black"),
        axis.title.x = element_text(face="bold", colour="black", size=15),
        axis.title.y = element_text(colour="black", size=15),
        axis.text.x  = element_text(colour = "black", angle=90, vjust=0.5, size=10, hjust = 1),
        axis.text.y  = element_text(colour = "black", angle=360, vjust=0.5, size=10),
        axis.title.x.bottom = element_blank(),
        panel.background = element_rect(fill = "white", colour = "black", linetype = 1, size = 1),
        panel.border = element_blank(),
        legend.position = "none")
plot(ant_shannon.rna)
```

Merge Shannon DNA and RNA
```{r}
library(cowplot)
alpha.ant.shannon.p <- cowplot::plot_grid(
   ant_shannon.dna + theme(legend.position="none"), 
  ant_shannon.rna+ theme(legend.position="none"), 
  nrow = 2, ncol = 1, scale = 1,
  hjust = 1) 
alpha.ant.shannon.p

#ggsave(file="./Antagonists/figures/antagonists-boxplot-t0-shannon.svg", plot=alpha.ant.shannon.p, 
#       width=80, height=150, unbact = "mm", device = "svg", scale = 0.8)
```
Observed

```{r}
3_ Observed DNA
#factor relevel
alpha.ant.gen.dna.meta$pre.crop <- fct_relevel(alpha.ant.gen.dna.meta$pre.crop, "bo", "ry", "ir", "er")

#plot
ant_Observed.dna <-  alpha.ant.gen.dna.meta %>% filter(sample.type=="rhizo") %>% 
  ggplot (aes (x= pre.crop, y=Observed, fill = pre.crop )) +
  geom_boxplot( alpha = 1, color = "black", fatten = 1) +
  #scale_color_manual(values = colorCode) + 
  scale_fill_manual(values = colorCode0) +
  scale_y_continuous(limits = c(10,40)) + 
  theme_bw() + 
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
        #panel.background = element_blank(), axis.line = element_line(size = 1, colour = "black"),
        rect = element_rect(fill = "white",  colour = "black",size = 1),
        axis.ticks = element_line(colour = "black"),
        axis.title.x = element_text(face="bold", colour="black", size=15),
        axis.title.y = element_text(colour="black", size=15),
        axis.text.x  = element_text(colour = "black", angle=90, vjust=0.5, size=10, hjust = 1),
        axis.text.y  = element_text(colour = "black", angle=360, vjust=0.5, size=10),
        axis.title.x.bottom = element_blank(),
        panel.background = element_rect(fill = "white", colour = "black", linetype = 1, size = 1),
        panel.border = element_blank(),
        legend.position = "none")
plot(ant_Observed.dna)

#4_Observed RNA
#factor relevel
alpha.ant.gen.rna.meta$pre.crop <- fct_relevel(alpha.ant.gen.rna.meta$pre.crop, "bo", "ry", "ir", "er")

#plot
ant_Observed.rna <-  alpha.ant.gen.rna.meta %>% filter(sample.type=="rhizo") %>% 
  ggplot (aes (x= pre.crop, y=Observed, fill = pre.crop )) +
  geom_boxplot( alpha = 1, color = "black", fatten = 1) +
  #scale_color_manual(values = colorCode) + 
  scale_fill_manual(values = colorCode0) +
  scale_y_continuous(limits = c(10,40)) + 
  theme_bw() + 
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
        #panel.background = element_blank(), axis.line = element_line(size = 1, colour = "black"),
        rect = element_rect(fill = "white",  colour = "black",size = 1),
        axis.ticks = element_line(colour = "black"),
        axis.title.x = element_text(face="bold", colour="black", size=15),
        axis.title.y = element_text(colour="black", size=15),
        axis.text.x  = element_text(colour = "black", angle=90, vjust=0.5, size=10, hjust = 1),
        axis.text.y  = element_text(colour = "black", angle=360, vjust=0.5, size=10),
        axis.title.x.bottom = element_blank(),
        panel.background = element_rect(fill = "white", colour = "black", linetype = 1, size = 1),
        panel.border = element_blank(),
        legend.position = "right")
plot(ant_Observed.rna)
```
Merge plots of Observed index
```{r}
library(cowplot)
alpha.ant.Observed.p <- cowplot::plot_grid(
   ant_Observed.dna + theme(legend.position="none"), 
  ant_Observed.rna+ theme(legend.position="none"), 
  nrow = 2, ncol = 1, scale = 1,
  hjust = 1) 
alpha.ant.Observed.p

#ggsave(file="./Antagonists/figures/antagonists-boxplot-t0-Observed.svg", plot=alpha.ant.Observed.p, 
#       width=80, height=150, unbact = "mm", device = "svg", scale = 0.8)
```

Merge Shannon and observed plots
```{r}
library(cowplot)
#extract legend
legend <- get_legend(
  # create some space to the left of the legend
  ant_Observed.rna + theme(legend.box.margin = margin(0,0,0,10)))

#merge plots of shannon and observed
alpha.gen <- cowplot::plot_grid(
   alpha.ant.shannon.p + theme(legend.position="none"), 
  alpha.ant.Observed.p+ theme(legend.position="none"), 
  nrow = 1, ncol = 2, scale = 1,
  hjust = 1) 
alpha.gen

#merge plots + legend
alpha.gen.l <- plot_grid(alpha.gen, legend, rel_widths = c(3,0.5))
alpha.gen.l
#ggsave(file="./Antagonists/figures/antagonists-boxplot-t0-Chao1.svg", plot=alpha.ant.Chao1.p, 
#       width=80, height=150, unbact = "mm", device = "svg", scale = 0.8)
```

Statistics on the alpha-diversity indexes
Apply linear models if shapiro gives normally distributed residuals

```{r}
#DNA

#filter only rhizosphere samples
ant.alpha.dna.t0.rhizo <-  alpha.ant.gen.dna.meta %>% filter(sample.type=="rhizo")

shapiro.test(ant.alpha.dna.t0.rhizo$Shannon)  #p-value > 0.05 data are not significantly different from normal distribution.
lm1 <- lm(Shannon ~ pre.crop, data = ant.alpha.dna.t0.rhizo) #linear model
summary(lm1) #check coefficients
anova(lm1) #get p value
res <- lm1$residuals #get residuals of the model
shapiro.test(res)#p-value > 0.05 data are not significantly different from normal distribution.
ggqqplot(res) #check normal distribution
ggdensity(res) #check normal distribution

shapiro.test(ant.alpha.dna.t0.rhizo$Observed) #p-value > 0.05 data are not significantly different from normal distribution.
lm2 <- lm(Observed ~ pre.crop, data = ant.alpha.dna.t0.rhizo)
summary(lm2)
anova(lm2) #get p value
res <- lm2$residuals
shapiro.test(res) #p-value > 0.05 data are not significantly different from normal distribution.
ggqqplot(res)
ggdensity(res)
```

```{r}
#RNA

#filter only rhizosphere samples
ant.alpha.rna.t0.rhizo <-  alpha.ant.gen.rna.meta %>% filter(sample.type=="rhizo")

shapiro.test(ant.alpha.rna.t0.rhizo$Shannon)
lm4 <- lm(Shannon ~ pre.crop, data = ant.alpha.rna.t0.rhizo)
summary(lm4) 
anova(lm4) #get p value
res <- lm4$residuals 
shapiro.test(res) #p-value > 0.05 data are not significantly different from normal distribution.
ggqqplot(res)
ggdensity(res)


shapiro.test(ant.alpha.rna.t0.rhizo$Observed)
lm5 <- lm(Observed ~ pre.crop, data = ant.alpha.rna.t0.rhizo)
summary(lm5)
anova(lm5) #get p value
res <- lm5$residuals
shapiro.test(res)#p-value > 0.05 data are not significantly different from normal distribution.
ggqqplot(res)
ggdensity(res)
```

#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################


3 _ Relative abundance

```{r}
#load dataset
load (file = 'ps-selected-only-bact-filt-lowabd-no-neg-norep2.RData')

#subset rhizo dna and rhizo rna at T0
ps.bact.dna <- subset_samples(ps.bact, nucleic.acid == "DNA"  & time.point == "T0" & sample.type == "rhizo")
ps.bact.rna <- subset_samples(ps.bact, nucleic.acid == "RNA"  & time.point == "T0" & sample.type == "rhizo")

#rarefy to minimum library size
ps.bact.dna_rar = rarefy_even_depth(ps.bact.dna, rngseed=1, sample.size=min(sample_sums(ps.bact.rna)), replace=F) #112718 reads - 2575OTUs removed
ps.bact.rna_rar = rarefy_even_depth(ps.bact.rna, rngseed=1, sample.size=min(sample_sums(ps.bact.rna)), replace=F) #41125 reads - 2884OTUs removed

#transform into compositional (if 100*Abundance = rel. abundance)
ps.bact.dna_comp <- transform(ps.bact.dna_rar, "compositional")
ps.bact.rna_comp <- transform(ps.bact.rna_rar, "compositional")
```

Select Antagonists
```{r}
#DNA
ant.bact.dna.gen_comp <- subset_taxa(ps.bact.dna_comp, Genus %in% c("Pseudomonas", "Bacillus", "Pasteuria", "Lysobacter", "Rhizobium", "Variovorax", "Serratia"))
ant.bact.dna.gen_comp@sam_data$pre.crop <- fct_relevel(ant.bact.dna.gen_comp@sam_data$pre.crop, "bo", "ry", "ir", "er")
#ant.bact.dna.gen_comp@sam_data$cc <- fct_relevel(ant.bact.dna.gen_comp@sam_data$cc, "FW", "OSR_T", "OSR_A", "OSR_R","PHA", "VE", "BO","BO.OSR_R", "BO.OSR_T", "PHA.OSR_T", "VE.OSR_T")

#RNA
ant.bact.rna.gen_comp <- subset_taxa(ps.bact.rna_comp, Genus %in% c("Pseudomonas", "Bacillus", "Pasteuria", "Lysobacter", "Rhizobium", "Variovorax", "Serratia"))
ant.bact.rna.gen_comp@sam_data$pre.crop <- fct_relevel(ant.bact.rna.gen_comp@sam_data$pre.crop, "bo", "ry", "ir", "er")
#ant.bact.rna.gen_comp@sam_data$cc <- fct_relevel(ant.bact.rna.gen_comp@sam_data$cc, "FW", "OSR_T", "OSR_A", "OSR_R","PHA", "VE", "BO","BO.OSR_R", "BO.OSR_T", "PHA.OSR_T", "VE.OSR_T")
```

Create dataset at Genus level 
```{r}
#DNA
#select these families because there were some genera associated to wrong families -> unreliable! Only keep Genera that are associated to the right family
ant.gen.dna <- subset_taxa(ant.bact.dna.gen_comp, Family %in% c("Bacillaceae", "Rhizobiaceae", "Comamonadaceae", "Pseudomonadaceae", "Xanthomonadaceae"))
ant.gen.dna <- microbiome::aggregate_taxa(ant.gen.dna, "Genus") @aggregate taxonomy to Genus
samdf.gen.dna <-as.data.frame(sample_data (ant.gen.dna)) #exctact metadata
otu.gen.dna <- as.data.frame (t(otu_table(ant.gen.dna))) #extract ASV table
tax.gen.dna <- as.data.frame(tax_table(ant.gen.dna)) #extract taxonomy table

#merge taxonomy table with ASV table
data.gen.dna <- merge (samdf.gen.dna, otu.gen.dna,  by = 'row.names')
colnames(data.gen.dna) #check colnames
#reorder dataframe so that all genera go to the column Genus and all rel. abundances go to the colum Abundance
data.gen.dna <-  data.gen.dna %>% pivot_longer (cols = Bacillus:Lysobacter,
                                                  names_to = "Genus", 
                                                  values_to = "Abundance") %>% 
                                  filter(Abundance > 0)

data.gen.dna$pre.crop <- fct_relevel(data.gen.dna$pre.crop, "bo", "ry", "ir", "er") #reorder in the right pre-crop order

#RNA
ant.gen.rna <- microbiome::aggregate_taxa(ant.gen.rna, "Genus")
samdf.gen.rna <-as.data.frame(sample_data (ant.gen.rna))
otu.gen.rna <- as.data.frame (t(otu_table(ant.gen.rna)))
tax.gen.rna <- as.data.frame(tax_table(ant.gen.rna))

data.gen.rna <- merge (samdf.gen.rna, otu.gen.rna,  by = 'row.names')
colnames(data.gen.rna)
data.gen.rna <-  data.gen.rna %>% pivot_longer (cols = Bacillus:Lysobacter,
                                                  names_to = "Genus", 
                                                  values_to = "Abundance") %>% 
                                   filter(Abundance > 0)

data.gen.rna$pre.crop <- fct_relevel(data.gen.rna$pre.crop, "bo", "ry", "ir", "er")
```

#Calculate means 
```{r}
#merge DNA and RNA dataframes
data.gen.bact.t0 <- merge.data.frame(data.gen.dna, data.gen.rna, all = TRUE)

#calculate mean abundance per genus per each pre-crop per each nucleic acid.
mean.pcgen.bact.t0 <- data.gen.bact.t0 %>%
  mutate(Abundance100 = Abundance * 100) %>% 
group_by(Genus, pre.crop, nucleic.acid) %>%
summarise_at(vars(Abundance100),             
               list(rel.abd = mean)) 
mean.pcgen.bact.t0# Specify function

#calculate mean abundance of all genera per each pre-crop per each nucleic acid.
mean.pc.bact.t0 <- data.gen.bact.t0 %>%
  mutate(Abundance100 = Abundance * 100) %>% 
group_by(nucleic.acid, pre.crop) %>%                        
summarise_at(vars(Abundance100),              
               list(rel.abd = mean)) 
mean.pc.bact.to

#calculate the sum of the abundance of all genera per each pre-crop per each nucleic acid.
tot.pc.bact.t0 <- mean.pcgen.bact.t0 %>%
group_by(nucleic.acid, pre.crop) %>%                        
summarise_at(vars(rel.abd),              
               list(rel.abd.sum = sum)) 
tot.pc.bact.t0

#calculate mean abundance per genus per per each nucleic acid.
mean.gen.bact.t0 <- data.gen.bact %>%
  mutate(Abundance100 = Abundance * 100) %>% 
group_by(nucleic.acid, Genus) %>%                        
summarise_at(vars(Abundance100),              
               list(rel.abd = mean)) 
mean.gen.bact.t0
```
Plots
#set common colours
```{r}
#make a vector with genera from DNA and RNA
unique.phyla <- union(unique(data.gen.dna$Genus), unique(data.gen.rna$Genus))
length(unique.phyla) #calculate how many genera are there in total
nb.cols <- length(unique.phyla) #
mycolors <- colorRampPalette(brewer.pal(12, "Paired"))(nb.cols) #associate colours from palette Paired to genera names
set.seed(77) #set fixed number for random
names(mycolors) <- sample(unique.phyla) #randomise colours
```

#make bar plots
P.S. in the manuscript as T0 and T1 common genera are not the same (at T1 there are a few extra), unique colours to use have been created on the T1 dataset = unique.phyla.t1, mycolors.t1
```{r}
plot.comp.dna <- plot_composition(ant.gen.dna,
                             sample.sort = "pre.crop",
                             x.label = "pre-crops",
                             average_by = "pre.crop") + 
  theme(legend.position = "right") + 
  scale_fill_manual("Genus",  values = mycolors, breaks = sort(unique.phyla)) + 
  scale_y_continuous(limits = c(0, 0.03), labels = scales::percent)+
  theme_classic() + 
  theme(axis.text.x = element_text(angle = 90, size = 12),
        axis.title.x = element_blank())+ 
  #ggtitle("Relative abundance of bacterial antagonists at DNA") + theme(legend.title = element_text(size = 18))+
  labs(y = "Relative abundance")
plot.comp.dna

plot.comp.rna <- plot_composition(ant.gen.rna,
                             sample.sort = "pre.crop",
                             x.label = "pre-crops",
                             average_by = "pre.crop") + 
  theme(legend.position = "right") + 
  scale_fill_manual("Genus",  values = mycolors, breaks = sort(unique.phyla)) + 
  scale_y_continuous(limits = c(0, 0.03), labels = scales::percent)+
  theme_classic() + 
  theme(axis.text.x = element_text(angle = 90, size = 12),
        axis.title.x = element_blank())+ 
  #ggtitle("Relative abundance of bacterial antagonists at RNA") + theme(legend.title = element_text(size = 18))+
  labs(y = "Relative abundance")
plot.comp.rna

##Combine figures
library(cowplot)
#get legend
legend <- get_legend(
  # create some space to the left of the legend
  p.gen.dna + theme(legend.box.margin = margin(0,0,0,10)))

#combie plots
alpha.ant.gen <- cowplot::plot_grid(
   plot.comp.dna + theme(legend.position="none"), 
  plot.comp.rna+ theme(legend.position="none"), 
  nrow = 2, ncol = 1, scale = 0.5,
  labels = c("A", "B")) 
alpha.ant.gen

#compbine plots and legend
alpha.ant.gen.leg <-plot_grid (alpha.ant.gen, legend, rel_widths = c(1,0.3),
                               scale = 0.8)
alpha.ant.gen.leg

#ggsave(file="./Antagonists/figures/t0-relabd.antagonists.svg", plot=alpha.ant.gen.shannon.leg, 
#       width=10, height=150, unbact = "mm", device = "svg", scale=1.5)
```

